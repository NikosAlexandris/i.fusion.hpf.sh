#!/bin/bash


# Started: 29. Oct. 2013
# Currently testing for G64


############################################################################
#
# MODULE:       i.fusion.hpf
# AUTHOR(S):    Nikos Alexandris <nik@nikosalexandris.net>
#				Nikos Ves <>
# PURPOSE:		HPF Resolution Merge -- Algorithm Replication in GRASS GIS
#
# 				Module to combine high-resolution panchromatic data with
# 				lower resolution multispectral data, resulting in an output
# 				with both excellent detail and a realistic representation of
# 				original multispectral scene colors.
#
# 				The process involves a convolution using a High Pass Filter
# 				(HPF) on the high resolution data, then combining this with
# 				the lower resolution multispectral data.
#
# 				Source: "Optimizing the High-Pass Filter Addition Technique for
# 				Image Fusion", Ute G. Gangkofner, Pushkar S. Pradhan,
# 				and Derrold W. Holcomb (2008)
#
# COPYRIGHT:    (C) 2013 by the GRASS Development Team
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################

#%Module
#%  description: Fuses a High-Resolution Panchromatic with its correspondin Low Resolution Multi-Spectral image based on the High-Pass Filter Addition technique
#%  keywords: imagery, fusion, HPF, HPFA
#%End
#%option
#% key: center
#% type: string
#% description: Center cell value of the High-Pass-Filter 
#% descriptions: low;Low center cell value;mid;Use a Mid value for the filter's center value;high;Use a High value for the filter's center value
#% options: low,mid,high
#% answer: low
#% guisection: High Pass Filter
#% multiple : yes
#%end
#%option
#% key: modulator
#% type: string
#% description: Level of modulating factor to determine crispness
#% descriptions: mid;Mid modulating factor;min;Use the Minimum modulating factor for weighting the HPF image;max;Use the Maximum modulating factor for weighting the HPF image;
#% options: mid,min,max
#% answer: mid
#% guisection: High Pass Filter
#%end
#%option
#% key: modulator2
#% type: string
#% description: Level of modulating factor to determine crispness for the second pass
#% descriptions: mid;Use the Mid modulating factor 0.35 for weighting the HPF image in the 2-Pass;min;Use the Minimum modulating factor 0.25 for weighting the HPF image in the 2-Pass;max;Use the Maximum modulating factor 0.5 for weighting the HPF image in the 2-Pass;
#% options: mid,min,max
#% answer: mid
#% guisection: High Pass Filter
#%end
#%flag
#%  key: l
#%  description: Linearly match histograms of the HPF Pan-sharpened output(s) to the Multi-Spectral input(s)
#%end
#%flag
#%  key: 2
#%  description: 2-Pass Processing (recommended) for large Resolution Ratio (>=5.5)
#%end
#%option
#% key: pan
#% type: string
#% gisprompt: old,double,raster
#% description: High resolution Panchromatic image for sharpening multi-spectral image
#% required : yes
#%end
#%option
#% key: msx
#% type: string
#% gisprompt: old,double,raster
#% description: Multi-Spectral image(s) to be pan-sharpened
#% required: yes
#% multiple: yes
#%end
#%option
#% key: output_suffix
#% type: string
#% gisprompt: old,double,raster
#% description: HPF Pan-Sharpened Multi-Spectral image(s)
#% required: yes
#% answer: HPF_Sharpened
#%end

# Various checks -------------------------------------------------------------

# inside a GRASSy environent?
if [ -z "$GISBASE" ] ; then
    g.message -e "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi

# save command line
if [ "$1" != "@ARGS_PARSED@" ]
  then CMDLINE=`basename "$0"`
	for arg in "$@"
	  do CMDLINE="$CMDLINE \"$arg\""
	done
  export CMDLINE
  exec g.parser "$0" "$@"
fi

# save default IFS
Default_IFS=$IFS

# function cleanup {
#   #remove temporary region file
#   unset WIND_OVERRIDE
#   g.remove region="i.hpfsharpen.$TMPPID" --quiet
# }

# what to do in case of user break:
function exitprocedure {
  g.message -e message='User break!'
  cleanup
  exit 1
}

# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15


# bc available?
SCRIPT=`basename $0`
if [ ! -x "`which bc`" ]
  then g.message -i "${SCRIPT}: bc required, please install it first" 2>&1
  exit 1
fi

# # clone current region
# g.region save="i.hpfsharpen.$TMPPID"


# Flags requesting various parameters for the HPF Matrix and the Process -----
echo ""

# perform linear histogram matching?
if [ $GIS_FLAG_L -eq 1 ]
  then g.message "Will linearly match histograms to adapt StdDev and Mean of the HPF Pan-Sharpened output to those of the Multi-Spectral input."
fi

# default or low (is the same) center cell value
if [ $GIS_OPT_CENTER == "low" ]
  then GIS_OPT_CENTER="Default"
  g.message "Using a Low center value [Default]"
fi

# mid center cell value
if [ $GIS_OPT_CENTER == "mid" ]
  then GIS_OPT_CENTER="Mid"
	g.message -i "Using a Mid center value"
  else g.message -v "Mid center value not requested"
fi

# high center cell value
if [ $GIS_OPT_CENTER == "high" ]
  then GIS_OPT_CENTER="High"
	g.message -i "Using a High center value"
  else g.message -v "High center value not requested"
fi

  # conflicting options?

	  # set to comma =============================================================
	  IFS=,
	  
	  # count options  
	  CENTER=( $GIS_OPT_CENTER )
	  if [ `echo ${#CENTER[@]}` -gt 1 ]
	  then g.message -e "Requested more than one center value for the filter! Please, instruct only one of them."
	  exit 1
	  fi
	  
	  # reset IFS ================================================================
	  IFS=${Default_IFS}


# default or mid (is the same) modulating factor
if [ $GIS_OPT_MODULATOR == "mid" ]
  then GIS_OPT_MODULATOR="Default"
  g.message -v "Using the Mid modulating factor [Default]"
fi

# minimum modulating factor
if [ $GIS_OPT_MODULATOR == "min" ]
  then GIS_OPT_MODULATOR="Min"
	g.message -i "Using the minimum modulating factor"
  else g.message -v "Minimum modulating factor not requested"
fi

# maximum modulating factor
if [ $GIS_OPT_MODULATOR == "max" ]
  then GIS_OPT_MODULATOR="Max"
	g.message -i "Using the Maximum modulating factor"
  else g.message -v "Maximum modulating factor not requested"
fi

  # conflicting options?

	# set to comma ===========================================================
	IFS=,

	# count options  
	MODULATOR=( $GIS_OPT_MODULATOR )
	if [ `echo ${#MODULATOR[@]}` -gt 1 ]
	  then g.message -e "Requested more than one modulating factors for the weighting process! Please, instruct only one of them."
	  exit 1
	fi

	# reset IFS ==============================================================
	IFS=${Default_IFS}



# 2-pass process for large ratios  ---  FIX THIS ===============================
if [ $GIS_FLAG_2 -eq 1 ]
  then g.message -i "Performing a 2-pass processing -- Not Implemented!"

# 	# default modulating factor 2
# 	if [ $GIS_FLAG_2 -eq 1 ] && [ $GIS_FLAG_N -eq 0 ] && [ $GIS_FLAG_X -eq 0 ]
# 	  then g.message "Using a default modulating factor for the 2-pass process"
# 	  Modulating_Level_2="Default"
# 	fi
# 
# 	# n
# 	if [ $GIS_FLAG_2 -eq 1 ] && [ $GIS_FLAG_N -eq 1 ] && [ $GIS_FLAG_X -eq 0 ]
# 	  then g.message -i "Using the Minimum modulating factor for the 2-pass process"
# 		Modulating_Level_2="Min"
# 	  else g.message "Flag -I not set"
# 	fi
# 
# 	# x
# 	if [ $GIS_FLAG_2 -eq 1 ] && [ $GIS_FLAG_X -eq 1 ] && [ $GIS_FLAG_N -eq 0 ]
# 	  then g.message -i "Using the Maximum modulating factor for the 2-pass process"
# 		Modulating_Level_2="Max"
# 	  else g.message "Flag -A not set"
# 	fi
# 
# 		# conflicting flags?
# 		if [ $GIS_FLAG_2 -eq 1 ] && [ $GIS_FLAG_N -eq 1 ] && [ $GIS_FLAG_X -eq 1 ]
# 	  then g.message -e "Requested both a Min and a Max modulating factor for the 2-pass weighting process! Please, instruct only one of them."
# 	  exit 1
# 	fi
# 
#   else g.message "Flag -2 not set"
#   
# 	if [ $GIS_FLAG_2 -eq 0 ] && [ $GIS_FLAG_N -eq 1 ] && [ $GIS_FLAG_X -eq 0 ]
# 	then g.message -i "Please request the 2-pass process by instructing the -2 flag!"
# 	exit 1
# 	fi
# 	
# 	# x
# 	if [ $GIS_FLAG_2 -eq 0 ] && [ $GIS_FLAG_X -eq 1 ] && [ $GIS_FLAG_N -eq 0 ]
# 	then g.message -i "Please request the 2-pass process by instructing the -2 flag!"
# 	exit 1
# 	fi
# 
fi

# ==============================================================================

# What was requested? --------------------------------------------------------

# Input Images
g.message -v " "
g.message -v "Images to be fused:"


# check if input panchromatic image exists
eval `g.findfile element=cell file="${GIS_OPT_PAN}"`
if [ -z "$name" ]
  then g.message -e "can't find the <${GIS_OPT_PAN}> image."
	exit 1
  else g.message -v "* High resolution image:	${GIS_OPT_PAN}"
fi

# check if input multi-spectral image exists

# set to comma ===============================================================
IFS=,

# loop over...
for Image in ${GIS_OPT_MSX}
  do
	# check if Image exists
	eval `g.findfile element=cell file="${Image}"`
	if [ -z "$name" ]
	  then g.message -e "can't find the <${Image}> image."
		exit 1
	  else g.message -v "* Low resolution image:	${Image}"
	fi
done

# reset IFS ==================================================================
IFS=${Default_IFS}

# Flags/Parameters
g.message -v " "
g.message -v "Requested parameters:"
g.message -v "* Center Cell Level: ${GIS_OPT_CENTER}"
g.message -v "* Modulating Factor Level: ${MODULATOR}"

if [ $GIS_FLAG_2 -eq 1 ]
  then g.message -i "* Modulating Factor Level_2: ${Modulator_Level_2}"
fi
# ----------------------------------------------------------------------------




# Implementation in GRASS GIS ################################################

#
# 1. Read pixel sizes from Image files and calculate R, the ratio of
# multispectral cell size to high-resolution cell size
# ----------------------------------------------------------------------------

g.message -i " "
g.message -i "[1] Computing Ratio of MSX to Pan Image"
g.message -v " "

# First, check & warn user about "ns == ew" resolution of current region

# eval current region's ns, ew resolutions
eval `g.region -g | grep ns`
eval `g.region -g | grep ew`

# check & warn if ns == ew
if [ $( echo "${nsres} != ${ewres}" | bc ) -eq 1 ]
  then g.message -w "The region's North:South and East:West resolutions do not match."
fi

# eval images resolutions: `r.info -s` for G64 || `-g` for G7

# PAN resolution
eval `r.info ${GIS_OPT_PAN} -s | grep nsres`
eval PAN_RESOLUTION="${nsres}"

# MSX resolution
eval `r.info ${GIS_OPT_MSX} -s | grep nsres`
eval MSX_RESOLUTION="${nsres}"

# Next, compute the Ratio of the Pan and MSX image resolutions
RATIO=$( echo "${MSX_RESOLUTION} / ${PAN_RESOLUTION}" | bc -l )
g.message -v "* Ratio of image resolutions is: ${RATIO}."




#
# 2. Apply the High-pass filter to the high spatial resolution image.
# ----------------------------------------------------------------------------

g.message -i " "
g.message -i "[2] High Pass Filtering the Pan Image"

# Respect current region -- Change the resolution
g.region res=${PAN_RESOLUTION}

# a High Pass Filter Matrix (of Matrix_Dimension^2) Constructor
function hpf_matrix {

  # Positional Parameters
  eval Matrix_Dimension="${1}"
  eval Center_Cell_Value="${2}"

  # Define the cell value(s)
  function hpf_cell_value {
	if (( ${Row} == ${Column} )) && (( ${Column} == `echo "( ${Matrix_Dimension} + 1 ) / 2" | bc` ))
	  then echo "${Center_Cell_Value} "
	  else echo "-1 "
	fi
  }

  # Construct the Row for Cols 1 to "Matrix_Dimension"
  function hpf_row {
	for Column in `seq ${Matrix_Dimension}`
	  do echo -n "$(hpf_cell_value)"
	done
  }

  # Construct the Matrix
  echo "MATRIX    ${Matrix_Dimension}"
  for Row in `seq ${Matrix_Dimension}`
  	do echo "$(hpf_row)"
  done
  echo "DIVISOR   1"
  echo "TYPE      P"
}



# Kernel Size, Center Value & Some Modulation Factor depend on Resolution Ratio

  # 1 < RATIO < 2.5 then 5x5
  if
  [[ $( echo "1 < ${RATIO}" | bc ) -eq 1 ]] && \
	[[ $( echo "${RATIO} < 2.5" | bc ) -eq 1 ]]

  then

  # kernel size
  Kernel_Size=5

  # potential center values
  Center_Default=24	;	Center_Mid=28	;	Center_High=32
  eval Center_Cell="Center_${GIS_OPT_CENTER}"

  # modulation Factor
  Modulator_Min=0.3	;	Modulator_Default=0.25	;	Modulator_Max=0.20
  eval Modulating_Factor="Modulator_${MODULATOR}"

  # the Matrix
  HPF_MATRIX_ASCII=`hpf_matrix ${Kernel_Size} ${!Center_Cell}`

  # Default will be:
					  #   HPF_MATRIX=\
					  # "MATRIX    5
					  # -1 -1 -1 -1 -1
					  # -1 -1 -1 -1 -1
					  # -1 -1 $(echo ${!Center_Cell}) -1 -1
					  # -1 -1 -1 -1 -1
					  # -1 -1 -1 -1 -1
					  # DIVISOR   1
					  # TYPE      P"

  fi

  # 2.5 <= RATIO < 3.5 then 7x7
  if

  [[ $( echo "2.5 < ${RATIO}" | bc ) -eq 1 ]] && \
	[[ $( echo "${RATIO} < 3.5" | bc ) -eq 1 ]]
  then

  # kernel size
  Kernel_Size=7 #&& echo ${Kernel_Size}

  # center values
  Center_Default=48	;	Center_Mid=56	;	Center_High=64
  eval Center_Cell="Center_${GIS_OPT_CENTER}"

  # modulation factor
  Modulator_Min=0.65 ; Modulator_Default=0.50 ; Modulator_Max=0.35
  eval Modulating_Factor="Modulator_${MODULATOR}"

  # the Matrix
  HPF_MATRIX_ASCII=`hpf_matrix ${Kernel_Size} ${!Center_Cell}`

  fi

  # 3.5 <= RATIO < 5.5 then 9x9
  if

  [[ $( echo "3.5 < ${RATIO}" | bc ) -eq 1 ]] && \
	[[ $( echo "${RATIO} < 5.5" | bc ) -eq 1 ]]
  then

  # kernel size
  Kernel_Size=9 #&& echo ${Kernel_Size}

  # center values 
  Center_Default=80	;	Center_Mid=96	;	Center_High=106
  eval Center_Cell="Center_${GIS_OPT_CENTER}"

  # modulation factor
  Modulator_Min=0.65 ; Modulator_Default=0.50 ; Modulator_Max=0.35
  eval Modulating_Factor="Modulator_${MODULATOR}"

  # the Matrix
  HPF_MATRIX_ASCII=`hpf_matrix ${Kernel_Size} ${!Center_Cell}`

  fi

  # 5.5 <= RATIO < 7.5 then 11x11
  if

  [[ $( echo "5.5 < ${RATIO}" | bc ) -eq 1 ]] && \
	[[ $( echo "${RATIO} < 7.5" | bc ) -eq 1 ]]
  then

  # kernel size
  Kernel_Size=11 #&& echo ${Kernel_Size}

  # center values
  Center_Default=120 ; Center_Mid=150 ; Center_High=180
  eval Center_Cell="Center_${GIS_OPT_CENTER}"

  # modulation factor
  Modulator_Min=1.0 ; Modulator_Default=0.65 ; Modulator_Max=0.50
  eval Modulating_Factor="Modulator_${MODULATOR}"

  # the Matrix
  HPF_MATRIX_ASCII=`hpf_matrix ${Kernel_Size} ${!Center_Cell}`

  fi

  # 7.5 <= RATIO < 9.5 then 13x13
  if

  [[ $( echo "7.5 < ${RATIO}" | bc ) -eq 1 ]] && \
	[[ $( echo "${RATIO} < 9.5" | bc ) -eq 1 ]]
  then

  # kernel size
  Kernel_Size=13 #&& echo ${Kernel_Size}

  # center values
  Center_Default=168	;	Center_Mid=210	;	Center_High=252
  eval Center_Cell="Center_${GIS_OPT_CENTER}"

  # modulation factor
  Modulator_Min=1.4 ; Modulator_Default=1.0 ; Modulator_Max=0.65
  eval Modulating_Factor="Modulator_${MODULATOR}"

  # the Matrix
  HPF_MATRIX_ASCII=`hpf_matrix ${Kernel_Size} ${!Center_Cell}`

  fi

  # RATIO >= 9.5 then 15x15
  if

  [[ $( echo "9.5 <= ${RATIO}" | bc ) -eq 1 ]]
  then

  # kernel size
  Kernel_Size=15 #&& echo ${Kernel_Size}

  # center values
  Center_Default=336	;	Center_Mid=392	;	Center_High=448
  eval Center_Cell="Center_${GIS_OPT_CENTER}"

  # modulation factor
  Modulator_Min=2.0 ; Modulator_Default=1.35 ; Modulator_Max=1.0
  eval Modulating_Factor="Modulator_${MODULATOR}"

  # the Matrix
  HPF_MATRIX_ASCII=`hpf_matrix ${Kernel_Size} ${!Center_Cell}`

  fi

  g.message -v " "
  g.message -v "* High Pass Filter created with Kernel Size \"${Kernel_Size}\" and Center Value \"${!Center_Cell}\""
  g.message -v " "
  g.message -v "${HPF_MATRIX_ASCII}"
  g.message -v " "

  # create (temporary) filter ASCII file
  Temporary_ASCII_HPF_Matrix_File="i.fusion.hpf.$$"
  if [ $? -ne 0 ] || [ -z "$Temporary_ASCII_HPF_Matrix_File" ]
	then g.message -e "unable to create temporary files"
	  exit 1
	else echo "${HPF_MATRIX_ASCII}" > "${Temporary_ASCII_HPF_Matrix_File}"
  fi


  ### ADD Additional Checks ? ###


  # create a temp file -- maybe I have misunderstood the use of g.tempfile!?
  Temporary_HPF="i.fusion.hpf.$$"
  if [ $? -ne 0 ] || [ -z "$Temporary_HPF" ]
	then g.message -e "unable to create temporary files"
	exit 1
  fi

## ###


  # apply filter (for G64 -- for G7 use r.mfilter?)
  r.mfilter \
  input="${GIS_OPT_PAN}" \
  filter="${Temporary_ASCII_HPF_Matrix_File}" \
  output="${Temporary_HPF}" \
  title="High Pass Filtered Panchromatic Image"

  # write cmd history
# r.support "" history="${CMDLINE}"
# r.support "$GIS_OPT_" history="${CMDLINE}"
# r.support "$GIS_OPT_" history="${CMDLINE}"

  # Remove this! ######################################################### ###
  g.copy rast="${Temporary_HPF}","HPF_Filtered_${GIS_OPT_PAN}"
  ###


#
# 3. Resample the Multi-Spectral image to the pixel size of the high-pass image.
# Note, bilinear resampling required (4 nearest neighbours)!
# ----------------------------------------------------------------------------

g.message -i " "
g.message -i "[3] Resampling MSX image to the higher resolution"

  # create a temp file
  Temporary_MSBLNR="i.fusion.hpf.$$"
  if [ $? -ne 0 ] || [ -z "$Temporary_MSBLNR" ]
	then g.message -e "unable to create temporary files"
	exit 1
  fi

  # resample -- named "linear" in G7
  r.resamp.interp \
  method="bilinear" \
  input="${GIS_OPT_MSX}" \
  output="${Temporary_MSBLNR}"

  # write cmd history
# r.support "" history="${CMDLINE}"
# r.support "$GIS_OPT_" history="${CMDLINE}"
# r.support "$GIS_OPT_" history="${CMDLINE}"

  # Remove this! ######################################################### ###
  g.copy rast="${Temporary_MSBLNR}","HPF_Resampled_${GIS_OPT_MSX}"
  ###



#
# 4. Add the HPF image weighted relative to the global standard deviation of
# the Multi-Spectral band.
# ----------------------------------------------------------------------------

g.message -i " "
g.message -i "[4] Adding weighted HPF image to the resampled MSX image"
g.message -i " "


# The weighting formula is: W = ( SD(MS) / SD(HPF) x M )
  # where:
	# SD(MS) and SD(HPF) are the Standard Deviations of the MS and HPF images
	# M is a Modulator value
	
g.message -v "* The weighting formula is:"
g.message -v "  Weight = StdDev (MSX) / StdDev (HPF) * Modulating Factor"

  # get Standard Deviations
  g.message -v " "

	# of Multi-Spectral Image(s)
	eval `r.univar ${GIS_OPT_MSX} -g | grep stddev`
	eval MSX_StdDev="${stddev}"
	g.message -v "MSX' StdDev: ${MSX_StdDev}"

	# *and* the HPF Image
	eval `r.univar ${Temporary_HPF} -g | grep stddev`
	eval HPF_StdDev="${stddev}"
	g.message -v "HPF's StdDev: ${HPF_StdDev}"
	
	# the modulating factor
	g.message -v "Modulating Factor set to: ${!Modulating_Factor:-None}"

  # compute weighting
  Weighting=$( echo "( ${MSX_StdDev} / ${HPF_StdDev} * ${!Modulating_Factor} )" | bc -l )
  g.message -v " "
  g.message -v "${Weighting} = ${MSX_StdDev} / ${HPF_StdDev} * ${!Modulating_Factor}"

  # create temporary file
  Temporary_MSHPF="i.fusion.hpf.$$"
  if [ $? -ne 0 ] || [ -z "$Temporary_MSHPF" ]
	then g.message -e "unable to create temporary files"
	exit 1
  fi

  # Add weighted HPF image to the bilinearly resampled Multi-Spectral band
  r.mapcalc "${Temporary_MSHPF} = ${Temporary_MSBLNR} + ${Temporary_HPF} * double (${Weighting})"

  # write cmd history
  r.support "${Temporary_MSHPF}" history="Weigthing applied: ${MSX_StdDev} / ${HPF_StdDev} * ${!Modulating_Factor}"
#   r.support "${Temporary_MSHPF}" history="Weigthing applied: ${MSX_StdDev} / ${HPF_StdDev} * ${!Modulating_Factor}"

  # Remove this! ######################################################### ###
  g.copy rast="${Temporary_MSHPF}","HPF_Sharpened_${GIS_OPT_MSX}"
  ###

#
# 5. Stretch linearly the new HPF-Sharpened image to match the mean and
# standard deviation of the input Multi-Sectral image.
# ----------------------------------------------------------------------------

g.message -i "[5] Optionally, matching histogram of Pansharpened image to the one of the original MSX image"
g.message -i "...not implemented"

# if [ $GIS_FLAG_L -eq 0 ]
#   then g.rename rast=${Temporary_MSHPF},${GIS_OPT_MSX}_${GIS_OPT_OUTPUT_SUFFIX}
#   else g.message -i "Matching histograms..." # linear hisogram matching to adapt output StdDev and Mean to the input-ted ones
#   # r.mapcalc
#   # input=${Temporary_MSHPF} \
#   # output=${GIS_OPT_MSX}_${GIS_OPT_OUTPUT_SUFFIX} \
# 	
# fi



#
# Clean up
#

# g.message -v "Restoring region settings."
# cleanup

# Remove temporary files -- Fix This!
# g.remove ${Temporary_HPF}
# g.remove ${Temporary_MSBLNR}
# g.remove ${Temporary_MSHPF}



#
# Inform how to...
#

# g.message -v "To visualize output, run:"
