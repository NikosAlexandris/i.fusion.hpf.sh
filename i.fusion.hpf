#!/bin/bash


# Started: 29. Oct. 2013 // Working state reached: 07. Nov. 2013
# Currently working for G64


############################################################################
#
# MODULE:       i.fusion.hpf
#
# AUTHOR(S):    Nikos Alexandris <nik@nikosalexandris.net>
#		Nikos Ves <vesnikos@gmail.com>
#
# PURPOSE:	HPF Resolution Merge -- Algorithm Replication in GRASS GIS
#
# 		Module to combine high-resolution panchromatic data with
# 		lower resolution multispectral data, resulting in an output
# 		with both excellent detail and a realistic representation of
# 		original multispectral scene colors.
#
#		The process involves a convolution using a High Pass Filter
#		(HPF) on the high resolution data, then combining this with
#		the lower resolution multispectral data.
#
#		Optionally, a linear histogram matching technique is performed
#		in a  way that matches the resulting Pan-Sharpened imaged to
#		them statistical mean and standard deviation of the original
#		multi-spectral image. Credits for how to implement this
#		technique go to	GRASS-GIS developer Moritz Lennert.
#
#		Source: "Optimizing the High-Pass Filter Addition Technique
# 		for Image Fusion", Ute G. Gangkofner, Pushkar S. Pradhan,
# 		and Derrold W. Holcomb (2008)
#
# COPYRIGHT:    (C) 2013 by the GRASS Development Team
#
#               This program is free software under the GNU General Public
#               License (>=v2). Read the file COPYING that comes with GRASS
#               for details.
#
#############################################################################

#%Module
#%  description: Fuses a High-Resolution Panchromatic with its corresponding Low Resolution Multi-Spectral image based on the High-Pass Filter Addition technique
#%  keywords: imagery, fusion, HPF, HPFA
#%End
#%flag
#%  key: l
#%  description: Linearly match histograms of the HPF Pan-sharpened output(s) to the Multi-Spectral input(s)
#%end
#%flag
#%  key: 2
#%  description: 2-Pass Processing (recommended) for large Resolution Ratio (>=5.5)
#%end
#%option
#% key: pan
#% type: string
#% gisprompt: old,double,raster
#% description: High resolution panchromatic image
#% required : yes
#%end
#%option
#% key: msx
#% type: string
#% gisprompt: old,double,raster
#% description: Low resolution multi-spectral image(s)
#% required: yes
#% multiple: yes
#%end
#%option
#% key: outputprefix
#% type: string
#% gisprompt: old,double,raster
#% description: Prefix for the Pan-Sharpened Multi-Spectral image(s)
#% required: yes
#% answer: hpf
#%end
#%option
#% key: ratio
#% type: double
#% description: Custom defined ratio to override standard calculation 
#% options: 1-10
#% guisection: High Pass Filter Options
#% required: no
#%end
#%option
#% key: center
#% type: string
#% description: Center cell value of the High-Pass-Filter 
#% descriptions: low;Low center cell value;mid;Mid center value;high;High center value
#% options: low,mid,high
#% required: no
#% answer: low
#% guisection: High Pass Filter Options
#% multiple : no
#%end
#%option
#% key: center2
#% type: string
#% description: Center cell value for the second pass of the High-Pass-Filter 
#% descriptions: low;Low center cell value;mid;Mid center value;high;High center value
#% options: low,mid,high
#% required: no
#% answer: low
#% guisection: High Pass Filter Options
#% multiple : no
#%end
#%option
#% key: modulator
#% type: string
#% description: Level of modulating factor weighting the HPF image to determine crispness
#% descriptions: mid;Mid modulating factor;min;Minimum modulating factor;max;Maximum modulating factor;
#% options: min,mid,max
#% required: no
#% answer: mid
#% guisection: High Pass Filter Options
#% multiple : no
#%end
#%option
#% key: modulator2
#% type: string
#% description: Level of modulating factor weighting the HPF image in the second pass to determine crispness
#% descriptions: mid;Mid modulating factor (0.35) for the 2nd pass;min;Minimum modulating factor (0.25) for the 2nd pass;max;Maximum modulating factor (0.5) for 2nd pass;
#% options: min,mid,max
#% required: no
#% answer: mid
#% guisection: High Pass Filter Options
#% multiple : no
#%end

# Various checks -------------------------------------------------------------

# inside a GRASSy environent?
if [ -z "$GISBASE" ] ; then
    g.message -e "You must be in GRASS GIS to run this program." 1>&2
    exit 1
fi

# save command line
if [ "$1" != "@ARGS_PARSED@" ]
  then CMDLINE=`basename "$0"`
	for arg in "$@"
	  do CMDLINE="$CMDLINE \"$arg\""
	done
  export CMDLINE
  exec g.parser "$0" "$@"
fi

# save default IFS
Default_IFS=$IFS

# clean up Temporary files
function cleantemp {
\rm -f i.fusion.hpf.tmp.*
g.mremove rast=i.fusion.hpf.tmp* -f
}
# function cleanregion
#   #remove temporary region file
#   unset WIND_OVERRIDE
#   g.remove region="i.hpfsharpen.$TMPPID" --quiet
# }

# what to do in case of user break:
function exitprocedure {
  g.message -e message='User break!'
  cleanup
  exit 1
}

# shell check for user break (signal list: trap -l)
trap "exitprocedure" 2 3 15


# bc available?
SCRIPT=`basename $0`
if [ ! -x "`which bc`" ]
  then g.message -i "${SCRIPT}: bc required, please install it first" 2>&1
  exit 1
fi

# # clone current region
# g.region save="i.hpfsharpen.$TMPPID"


# Flags requesting various parameters for the HPF Matrix and the Process -----
g.message -v "Overview of Parameters:"

# perform linear histogram matching?  ---  Not Implemented Yet!
if [ $GIS_FLAG_L -eq 1 ]
  then g.message -i " * Will linearly match histograms to adapt StdDev and Mean of the HPF Pan-Sharpened output to those of the Multi-Spectral input."
fi

# default or low (is the same) center cell value
if [ $GIS_OPT_CENTER == "low" ]
  then GIS_OPT_CENTER="Default"
  g.message -v " * Using a Low center value [Default]"
fi

# mid center cell value
if [ $GIS_OPT_CENTER == "mid" ]
  then GIS_OPT_CENTER="Mid"
	g.message -v " * Using a Mid center value"
  else g.message -v " * Mid center value not requested"
fi

# high center cell value
if [ $GIS_OPT_CENTER == "high" ]
  then GIS_OPT_CENTER="High"
	g.message -v " * Using a High center value"
  else g.message -v " * High center value not requested"
fi

  # conflicting options?

	  # set to comma =========================================================
	  IFS=,
	  
	  # count options  
	  CENTER=( $GIS_OPT_CENTER )
	  if [ `echo ${#CENTER[@]}` -gt 1 ]
	  then g.message -e "Requested more than one center value for the filter! Please, instruct only one of them."
	  exit 1
	  fi
	  
	  # reset IFS ============================================================
	  IFS=$Default_IFS


# default or mid (is the same) modulating factor
if [ $GIS_OPT_MODULATOR == "mid" ]
  then GIS_OPT_MODULATOR="Default"
  g.message -v " * Using the Mid modulating factor [Default]"
fi

# minimum modulating factor
if [ $GIS_OPT_MODULATOR == "min" ]
  then GIS_OPT_MODULATOR="Min"
	g.message -v " * Using the minimum modulating factor"
  else g.message -v " * Minimum modulating factor not requested"
fi

# maximum modulating factor
if [ $GIS_OPT_MODULATOR == "max" ]
  then GIS_OPT_MODULATOR="Max"
	g.message -v " * Using the Maximum modulating factor"
  else g.message -v " * Maximum modulating factor not requested"
fi

  # conflicting options?

	# set to comma ===========================================================
	IFS=,

	# count options  
	MODULATOR=( $GIS_OPT_MODULATOR )
	if [ `echo ${#MODULATOR[@]}` -gt 1 ]
	  then g.message -e "Requested more than one modulating factors for the weighting process! Please, instruct only one of them."
	  exit 1
	fi

	# reset IFS ==============================================================
	IFS=$Default_IFS



# 2-pass process for large ratios
if [ $GIS_FLAG_2 -eq 1 ]
  then g.message -i " > 2nd Pass requested. Note, works only for Resolution Ratio > 5.5"
  
	# center value for the second high pass filter -------------------------
	
	# default or low (is the same) center cell value
	if [ $GIS_OPT_CENTER2 == "low" ]
	  then GIS_OPT_CENTER2="Default"
	  g.message -v " * Using a Low center value for the 2nd pass [Default]"
	fi
	
	# mid center cell value
	if [ $GIS_OPT_CENTER2 == "mid" ]
	  then GIS_OPT_CENTER2="Mid"
		g.message -v " * Using a Mid center value for the 2nd pass"
	  else g.message -v " * Mid center value not requested for the 2nd pass"
	fi
	
	# high center cell value
	if [ $GIS_OPT_CENTER2 == "high" ]
	  then GIS_OPT_CENTER2="High"
		g.message -v " * Using a High center value for the 2nd pass"
	  else g.message -v " * High center value not requested for the 2nd pass"
	fi
	
	  # conflicting options?
	  
	  # set to comma =========================================================
	  IFS=,
	  
	  # count options  
	  CENTER2=( $GIS_OPT_CENTER2 )
	  if [ `echo ${#CENTER2[@]}` -gt 1 ]
	  then g.message -e "Requested more than one center value for the 2nd filter! Please, instruct only one of them."
	  exit 1
	  fi
	  
	  # reset IFS ============================================================
	  IFS=$Default_IFS

	# default modulating factor 2

	# default or mid (is the same) modulating factor
	if [ $GIS_OPT_MODULATOR2 == "mid" ]
	  then GIS_OPT_MODULATOR2="Default"
	  g.message -v " * Using the Mid modulating factor for the 2nd pass if applicable [Default]"
	fi

	# minimum modulating factor --------------------------------------------
	if [ $GIS_OPT_MODULATOR2 == "min" ]
	  then GIS_OPT_MODULATOR2="Min"
		g.message -i " * Using the minimum modulating factor for the 2nd pass"
	  else g.message -v " * Minimum modulating factor not requested for the 2nd pass"
	fi

	# maximum modulating factor
	if [ $GIS_OPT_MODULATOR2 == "max" ]
	  then GIS_OPT_MODULATOR2="Max"
		g.message -i " * Using the Maximum modulating factor for the 2nd pass"
	  else g.message -v " * Maximum modulating factor not requested for the 2nd pass"
	fi
	
	  # conflicting options?
	  
	  # set to comma ===========================================================
	  IFS=,
	  
	  # count options  
	  MODULATOR2=( $GIS_OPT_MODULATOR2 )
	  if [ `echo ${#MODULATOR2[@]}` -gt 1 ]
		then g.message -e "Requested more than one modulating factors for the 2nd weighting process! Please, instruct only one of them."
		exit 1
	  fi
	  
	  # reset IFS ==============================================================
	  IFS=$Default_IFS

fi



# What was requested? --------------------------------------------------------

# Input Images
g.message -v " "
g.message -v "Images to be fused:"


# check if input panchromatic image exists
eval `g.findfile element=cell file="$GIS_OPT_PAN"`
if [ -z "$name" ]
  then g.message -e "can't find the <$GIS_OPT_PAN> image."
	exit 1
  else g.message -v " * High resolution image:	$GIS_OPT_PAN"
fi

# check if input multi-spectral image exists

# set to comma ===============================================================
IFS=,

# loop over...
for Image in $GIS_OPT_MSX
  do
	# check if Image exists
	eval `g.findfile element=cell file="$Image"`
	if [ -z "$name" ]
	  then g.message -e "can't find the <$Image> image."
		exit 1
	  else g.message -v "* Low resolution image:	$Image"
	fi
done

# reset IFS ==================================================================
IFS=$Default_IFS

### OR -----------------------------------------------------------------------
# for Image in `echo $GIS_OPT_MSX | tr "," "\ "` ; do echo ${Image}  ;  done
# ----------------------------------------------------------------------------

# Flags/Parameters
g.message -v " "
g.message -v "Requested parameters:"
g.message -v " * Center Cell Level: $GIS_OPT_CENTER"
g.message -v " * Modulating Factor Level: ${MODULATOR}"

if [ $GIS_FLAG_2 -eq 1 ]
  then g.message -i " * Modulating Factor Level_2: ${Modulator_Level_2:-Non Applicable}"
fi
# ----------------------------------------------------------------------------



# Big loop over multiple MSX images ##########################################

for MSX in `echo $GIS_OPT_MSX | tr "," "\ "` #################################

 do ##########################################################################
 
##############################################################################

g.message -i " "
g.message -i "> Processing image: ${MSX}"
g.message -v " "


# Implementation in GRASS GIS ################################################

#
# 1. Read pixel sizes from Image files and calculate R, the ratio of
# multispectral cell size to high-resolution cell size
# ----------------------------------------------------------------------------

# First, check & warn user about "ns == ew" resolution of current region

# eval current region's ns, ew resolutions
eval `g.region -g | grep ns`
eval `g.region -g | grep ew`

# check & warn if ns == ew
if [ $( echo "${nsres} != ${ewres}" | bc ) -eq 1 ]
  then g.message -w "The region's North:South and East:West resolutions do not match."
fi

# eval images resolutions: `r.info -s` for G64 || `-g` for G7

# PAN resolution
eval `r.info ${GIS_OPT_PAN} -s | grep nsres`
eval PAN_RESOLUTION="${nsres}"

# MSX resolution
eval `r.info ${MSX} -s | grep nsres` # eval `r.info ${GIS_OPT_MSX} -s | grep nsres`
eval MSX_RESOLUTION="${nsres}" # eval MSX_RESOLUTION="${nsres}"

# check for custom ratio, else proceed to standard computation method
if [ ! -z $GIS_OPT_RATIO ]

  then RATIO=${GIS_OPT_RATIO}
	g.message " "
	g.message -w "Using a custom ratio value that will override the standard method"
  else

  # Next, compute the Ratio of the Pan and MSX image resolutions
  RATIO=$( echo "${MSX_RESOLUTION} / ${PAN_RESOLUTION}" | bc -l )

fi
	
	g.message -v "1 Computing ratio of low (${MSX_RESOLUTION}) to high resolution (${PAN_RESOLUTION}): $(printf "%0.1f\n" $RATIO)"


# 2nd pass requested but Ratio < 5.5
if [ $GIS_FLAG_2 -eq 1 ] && [[ $( echo "$RATIO < 5.5" | bc ) -eq 1 ]]
  then g.message -i " * Ratio < 5.5 -- wont apply a 2nd pass!"
fi



#
# 2. Apply the High-pass filter to the high spatial resolution image.
# ----------------------------------------------------------------------------

# Respect current region -- Change the resolution
g.region res=$PAN_RESOLUTION
g.message -v "> Region's resolution set to $PAN_RESOLUTION"

# a High Pass Filter Matrix (of Matrix_Dimension^2) Constructor
function hpf_matrix {

  # Positional Parameters
  eval Matrix_Dimension="${1}"
  eval Center_Cell_Value="${2}"

  # Define the cell value(s)
  function hpf_cell_value {
	if (( ${Row} == ${Column} )) && (( ${Column} == `echo "( ${Matrix_Dimension} + 1 ) / 2" | bc` ))
	  then echo "${Center_Cell_Value} "
	  else echo "-1 "
	fi
  }

  # Construct the Row for Cols 1 to "Matrix_Dimension"
  function hpf_row {
	for Column in `seq $Matrix_Dimension`
	  do echo -n "$(hpf_cell_value)"
	done
  }

  # Construct the Matrix
  echo "MATRIX    $Matrix_Dimension"
  for Row in `seq $Matrix_Dimension`
  	do echo "$(hpf_row)"
  done
  echo "DIVISOR   1"
  echo "TYPE      P"
}



# Kernel Size, Center Value & Some Modulation Factor depend on Resolution Ratio

  # 1 < RATIO < 2.5 then 5x5
  if
  [[ $( echo "1 < $RATIO" | bc ) -eq 1 ]] && \
	[[ $( echo "$RATIO < 2.5" | bc ) -eq 1 ]]

  then

  # kernel size
  Kernel_Size=5

  # potential center values
  Center_Default=24	;	Center_Mid=28	;	Center_High=32
  eval Center_Cell="Center_${GIS_OPT_CENTER}"

  # modulation Factor
  Modulator_Min=0.2	;	Modulator_Default=0.25	;	Modulator_Max=0.3
  eval Modulating_Factor="Modulator_${MODULATOR}"

  # the Matrix
  HPF_MATRIX_ASCII=`hpf_matrix ${Kernel_Size} ${!Center_Cell}`

  # Default will be:
					  #   HPF_MATRIX=\
					  # "MATRIX    5
					  # -1 -1 -1 -1 -1
					  # -1 -1 -1 -1 -1
					  # -1 -1 $(echo ${!Center_Cell}) -1 -1
					  # -1 -1 -1 -1 -1
					  # -1 -1 -1 -1 -1
					  # DIVISOR   1
					  # TYPE      P"

  fi

  # 2.5 <= RATIO < 3.5 then 7x7
  if

  [[ $( echo "2.5 < $RATIO" | bc ) -eq 1 ]] && \
	[[ $( echo "$RATIO < 3.5" | bc ) -eq 1 ]]
  then

  # kernel size
  Kernel_Size=7 #&& echo ${Kernel_Size}

  # center values
  Center_Default=48	;	Center_Mid=56	;	Center_High=64
  eval Center_Cell="Center_${GIS_OPT_CENTER}"

  # modulation factor
  Modulator_Min=0.35 ; Modulator_Default=0.50 ; Modulator_Max=0.65
  eval Modulating_Factor="Modulator_${MODULATOR}"

  # the Matrix
  HPF_MATRIX_ASCII=`hpf_matrix ${Kernel_Size} ${!Center_Cell}`

  fi

  # 3.5 <= RATIO < 5.5 then 9x9
  if

  [[ $( echo "3.5 < $RATIO" | bc ) -eq 1 ]] && \
	[[ $( echo "$RATIO < 5.5" | bc ) -eq 1 ]]
  then

  # kernel size
  Kernel_Size=9 #&& echo ${Kernel_Size}

  # center values 
  Center_Default=80	;	Center_Mid=96	;	Center_High=106
  eval Center_Cell="Center_${GIS_OPT_CENTER}"

  # modulation factor
  Modulator_Min=0.35 ; Modulator_Default=0.50 ; Modulator_Max=0.65
  eval Modulating_Factor="Modulator_${MODULATOR}"

  # the Matrix
  HPF_MATRIX_ASCII=`hpf_matrix ${Kernel_Size} ${!Center_Cell}`

  fi

  # 5.5 <= RATIO < 7.5 then 11x11
  if

  [[ $( echo "5.5 < $RATIO" | bc ) -eq 1 ]] && \
	[[ $( echo "$RATIO < 7.5" | bc ) -eq 1 ]]
  then

  # kernel size
  Kernel_Size=11 #&& echo ${Kernel_Size}

  # center values
  Center_Default=120 ; Center_Mid=150 ; Center_High=180
  eval Center_Cell="Center_${GIS_OPT_CENTER}"
  Center2_Default=24	;	Center2_Mid=28	;	Center2_High=32
  eval Center_Cell2="Center2_${GIS_OPT_CENTER2}"

  # modulation factor
  Modulator_Min=0.5 ; Modulator_Default=0.65 ; Modulator_Max=1.0
  eval Modulating_Factor="Modulator_${MODULATOR}"
  Modulator2_Min=0.25	;	Modulator2_Default=0.35	;	Modulator2_Max=0.5
  eval Modulating_Factor2="Modulator2_${MODULATOR2}"

  # the Matrix
  HPF_MATRIX_ASCII=`hpf_matrix ${Kernel_Size} ${!Center_Cell}`

	# the 2nd Matrix -- note, 2-pass kernel size always =5
	if [ $GIS_FLAG_2 -eq 1 ]
	  then HPF_MATRIX_ASCII_2=`hpf_matrix 5 ${!Center_Cell2}` 
	fi

  fi

  # 7.5 <= RATIO < 9.5 then 13x13
  if

  [[ $( echo "7.5 < $RATIO" | bc ) -eq 1 ]] && \
	[[ $( echo "$RATIO < 9.5" | bc ) -eq 1 ]]
  then

  # kernel size
  Kernel_Size=13 #&& echo ${Kernel_Size}

  # center values
  Center_Default=168	;	Center_Mid=210	;	Center_High=252
  eval Center_Cell="Center_${GIS_OPT_CENTER}"
  Center2_Default=24	;	Center2_Mid=28	;	Center2_High=32
  eval Center_Cell2="Center2_${GIS_OPT_CENTER2}"

  # modulation factor
  Modulator_Min=0.65 ; Modulator_Default=1.0 ; Modulator_Max=1.4
  eval Modulating_Factor="Modulator_${MODULATOR}"
  Modulator2_Min=0.25	;	Modulator2_Default=0.35	;	Modulator2_Max=0.5
  eval Modulating_Factor2="Modulator2_${MODULATOR2}"
  
  # the Matrix
  HPF_MATRIX_ASCII=`hpf_matrix ${Kernel_Size} ${!Center_Cell}`
  
	# the 2nd Matrix
	  if [ $GIS_FLAG_2 -eq 1 ]
		then HPF_MATRIX_ASCII_2=`hpf_matrix 5 ${!Center_Cell2}`
	  fi

  fi

  # RATIO >= 9.5 then 15x15
  if

  [[ $( echo "9.5 <= $RATIO" | bc ) -eq 1 ]]
  then

  # kernel size
  Kernel_Size=15 #&& echo ${Kernel_Size}

  # center values
  Center_Default=336	;	Center_Mid=392	;	Center_High=448
  eval Center_Cell="Center_${GIS_OPT_CENTER}"
  Center2_Default=24	;	Center2_Mid=28	;	Center2_High=32
  eval Center_Cell2="Center2_${GIS_OPT_CENTER2}"

  # modulation factor
  Modulator_Min=1.0 ; Modulator_Default=1.35 ; Modulator_Max=2.0
  eval Modulating_Factor="Modulator_${MODULATOR}"
  Modulator2_Min=0.25	;	Modulator2_Default=0.35	;	Modulator2_Max=0.5
  eval Modulating_Factor2="Modulator2_${MODULATOR2}"
  
  # the Matrix
  HPF_MATRIX_ASCII=`hpf_matrix ${Kernel_Size} ${!Center_Cell}`
  
	# the 2nd Matrix
	if [ $GIS_FLAG_2 -eq 1 ]
	  then HPF_MATRIX_ASCII_2=`hpf_matrix 5 ${!Center_Cell2}`
	fi

  fi

  g.message -v "2 High-Pass filtering the Panchromatic image (${GIS_OPT_PAN})"
  g.message -v " * Kernel Size >${Kernel_Size}< // Center Cell Value >${!Center_Cell}<"
  g.message -v " "
  g.message -v "${HPF_MATRIX_ASCII}"
  g.message -v " "
  
	# the 2nd Matrix
	if [ $GIS_FLAG_2 -eq 1 ] && [[ $( echo "5.5 < $RATIO" | bc ) -eq 1 ]]
	  then g.message -v " "
	  g.message -v " > Second High Pass Filtering (Sequential Add-Back)"
	  
	  g.message -v "Kernel Size >5< // Center Cell Value >${!Center_Cell2}<"
	  g.message -v " "
	  g.message -v "${HPF_MATRIX_ASCII_2}"
	  g.message -v " "
	fi


  # create (temporary) filter ASCII file
  Temporary_ASCII_HPF_Matrix_File="i.fusion.hpf.tmp.MATRIX.1"

  if [ $? -ne 0 ] || [ -z "${Temporary_ASCII_HPF_Matrix_File}" ]

	then g.message -e "unable to create ascii filter files"
	  exit 1

	else echo "${HPF_MATRIX_ASCII}" > "${Temporary_ASCII_HPF_Matrix_File}"
	
	  if [ $GIS_FLAG_2 -eq 1 ] && [[ $( echo "5.5 < $RATIO" | bc ) -eq 1 ]]
		then Temporary_ASCII_HPF_Matrix_File_2="i.fusion.hpf.tmp.MATRIX.2"
		echo "${HPF_MATRIX_ASCII_2}" > "${Temporary_ASCII_HPF_Matrix_File_2}"
	  fi

  fi


  ### ADD Additional Checks ? ###


  # create a temp file 
  Temporary_HPF="i.fusion.hpf.tmp.HPF.1" # g.tempfile does not work... ?
  if [ $? -ne 0 ] || [ -z "$Temporary_HPF" ]
	then g.message -e "unable to create temporary HPF files"
	exit 1
  fi

## ###


  # apply filter (for G64 -- for G7 use r.mfilter?)
  r.mfilter.fp --o --q \
  input="$GIS_OPT_PAN" \
  filter="$Temporary_ASCII_HPF_Matrix_File" \
  output="$Temporary_HPF" \
  title="High Pass Filtered Panchromatic image"

  # write cmd history
# r.support "" history="${CMDLINE}"
# r.support "$GIS_OPT_" history="${CMDLINE}"
# r.support "$GIS_OPT_" history="${CMDLINE}"

  # apply a second pass (use again the original Pan!)
  if [ $GIS_FLAG_2 -eq 1 ] && [[ $( echo "5.5 < $RATIO" | bc ) -eq 1 ]]

	then Temporary_HPF_2="i.fusion.hpf.tmp.HPF.2" # I don't understand g.tempfile!
	if [ $? -ne 0 ] || [ -z "$Temporary_HPF_2" ]
	  then g.message -e "unable to create 2nd-pass temporary HPF files"
	  exit 1
	fi
	
	r.mfilter.fp --o \
	input="$GIS_OPT_PAN" \
	filter="$Temporary_ASCII_HPF_Matrix_File_2" \
	output="$Temporary_HPF_2" \
	title="2x High-Pass Filtered Panchromatic Image"

  fi

#
# 3. Resample the Multi-Spectral image to the pixel size of the high-pass image.
# Note, bilinear resampling required (4 nearest neighbours)!
# ----------------------------------------------------------------------------


  # create a temp file
  Temporary_MSBLNR="i.fusion.hpf.tmp.MSBLNR"
  if [ $? -ne 0 ] || [ -z "$Temporary_MSBLNR" ]
	then g.message -e "unable to create temporary files"
	exit 1
  fi

  g.message -v "3 Upsampling the low resolution image ($MSX) to the higher resolution ($PAN_RESOLUTION)"

  # resample -- named "linear" in G7
  r.resamp.interp --o --q \
  method="bilinear" \
  input="$MSX" \
  output="$Temporary_MSBLNR"

  # write cmd history  --  FIX THIS!
  # r.support "" history="${CMDLINE}"
  #   r.support "${Temporary_MSBLNR}" history="${CMDLINE}"
  # r.support "$GIS_OPT_" history="${CMDLINE}"



#
# 4. Add the HPF image weighted relative to the global standard deviation of
# the Multi-Spectral band.
# ----------------------------------------------------------------------------

# The weighting formula is: W = ( SD(MS) / SD(HPF) x M )
  # where:
	# SD(MS) and SD(HPF) are the Standard Deviations of the MS and HPF images
	# M is a Modulator value

  # compute weighting(s)
  g.message -v " "
  g.message -v "* Weighting = StdDev (MSX) / StdDev (HPF) * Modulating Factor"

	# get Standard Deviations
	
	# of Multi-Spectral Image(s)
	eval `r.univar $MSX -g | grep stddev`
	eval MSX_StdDev="$stddev"
	g.message -v "* StdDev of Multi-Spectral input: ${MSX_StdDev}"

	# *and* the HPF Image
	eval `r.univar $Temporary_HPF -g | grep stddev`
	eval HPF_StdDev="$stddev"
	g.message -v "* StdDev of High-Pass Filtered image: ${HPF_StdDev}"
	
	# the modulating factor
	g.message -v "* Modulating Factor set to: ${!Modulating_Factor:-None}"

	Weighting=$( echo "( $MSX_StdDev / $HPF_StdDev * ${!Modulating_Factor} )" | bc -l )

# 	g.message -v "${Weighting} = ${MSX_StdDev} / ${HPF_StdDev} * ${!Modulating_Factor}"
	g.message -v "* Weighting = $Weighting"
	g.message -v " "
	

	  # 2nd pass...
	  if [ $GIS_FLAG_2 -eq 1 ]  && [[ $( echo "5.5 < $RATIO" | bc ) -eq 1 ]]
		then
		
		# *and* the HPF Image
		eval `r.univar $Temporary_HPF_2 -g | grep stddev`
		eval HPF_StdDev_2="$stddev"
		g.message -v "* StdDev of 2nd HPF image: $HPF_StdDev_2"

		# the modulating factor 2
		g.message -v "* Modulating Factor for the second pass set to: ${!Modulating_Factor2:-None}"

		Weighting_2=$( echo "( $MSX_StdDev / $HPF_StdDev_2 * ${!Modulating_Factor2} )" | bc -l )
# 		g.message -v "${Weighting_2} = ${MSX_StdDev} / ${HPF_StdDev_2} * ${!Modulating_Factor2}"
		g.message -v "* 2nd Pass Weighting = $Weighting_2"
		g.message -v " "

	  fi
	
  # create temporary file
  Temporary_MSHPF="i.fusion.hpf.tmp.MSHPF"
  if [ $? -ne 0 ] || [ -z "$Temporary_MSHPF" ]
	then g.message -e "unable to create temporary files"
	exit 1
  fi

  g.message -v "4 Adding weighted HPF image to the upsampled image"



  # Add weighted HPF image to the bilinearly resampled Multi-Spectral band
  r.mapcalc "$Temporary_MSHPF = $Temporary_MSBLNR + $Temporary_HPF * double($Weighting)"
  g.message -v "HPF image added to the bilinearly resampled MSX image."
  
	# check if 2nd pass applies
	if [ $GIS_FLAG_2 -eq 1 ]  && [[ $( echo "5.5 < $RATIO" | bc ) -eq 1 ]]
	  then	g.message -i "Adding back a 2nd pass weighted HPF image to the upsampled image"

		r.mapcalc "$Temporary_MSHPF = $Temporary_MSHPF + ( $Temporary_HPF_2 * double($Weighting_2) )"
		g.message -v "2nd pass performed successfuly!"

	fi
	
	g.copy --q rast=$Temporary_MSHPF,${GIS_OPT_OUTPUTPREFIX}_${MSX}
	### This line should come after the following r.support actions !?
	

  # write cmd history
  r.support "${Temporary_MSHPF}" history="Weigthing applied: ${MSX_StdDev} / ${HPF_StdDev} * ${!Modulating_Factor}"
# r.support "${Temporary_MSHPF}" history="Weigthing applied: ${MSX_StdDev} / ${HPF_StdDev} * ${!Modulating_Factor}"
  
  # 2nd pass history entry
  if [ $GIS_FLAG_2 -eq 1 ]  && [[ $( echo "5.5 < $RATIO" | bc ) -eq 1 ]]
	then r.support "${Temporary_MSHPF}" history="2nd Pass Weigthing applied: ${MSX_StdDev} / ${HPF_StdDev2} * ${!Modulating_Factor2}"
  fi



#
# 5. Stretch linearly the new HPF-Sharpened image to match the mean and
# standard deviation of the input Multi-Sectral image.
# ----------------------------------------------------------------------------

g.message -v "5 Linearly matching histogram of the >${GIS_OPT_PAN}< to the >${MSX}< image [Not Implemented!]"

# if [ $GIS_FLAG_L -eq 0 ]
  #   then g.rename rast=${Temporary_MSHPF},${GIS_OPT_MSX}_${GIS_OPT_OUTPUTPREFIX}
  #   else g.message -i "Matching histograms..." # linear histogram matching to adapt output StdDev and Mean to the input-ted ones
  
  #   # input=${Temporary_MSHPF} \
  #   # output=${GIS_OPT_MSX}_${GIS_OPT_OUTPUTPREFIX} \

#   r.mapcalc "MSHPF_Histomatched = ( $Temporary_MSHPF - $MSHPF_Mean ) / $MSHPF_StdDev * $Reference_StdDev + $Reference_Mean" --o
# fi

# g.message -i " "
g.message -i ">> Pan-sharpened image named \"${GIS_OPT_OUTPUTPREFIX}_${MSX}\""


# Closing up big loop over multiple MSX images ###############################

# for MSX in `echo $GIS_OPT_MSX | tr "," "\ "` ###############################

#  do ########################################################################

done #########################################################################

##############################################################################


#
# Clean up
#

# g.message -v "Restoring region settings."
cleantemp



#
# Inform (how to...)
#



# visualising output
g.message -i " "
g.message -i "> Note, it is probably required to rebalance colors (using i.landsat.rgb) before visualising/compositing RGB images!"

# g.message -v message="i.landsat.rgb r=$GIS_OPT_ g=$GIS_OPT_ b=$GIS_OPT_"
# g.message -v "If desired, combine channels with 'r.composite' to a single map."
